---
title: "Untitled"
format: html
editor: visual
---

```{r setup}


library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

```


# Data


```{r alt data, message=FALSE}

ged241 <- readRDS(here("data", "ged241.rds"))

acled_filtered <- readRDS(here("data", "acled_filtered.rds"))

acled_country_list <- acled_filtered |> 
  count(region, country, iso)

ged <- ged241 |> 
  filter(date_start < "2024-01-01" & date_start >= "2013-01-01") |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |> 
  filter(country %in% acled_country_list$country)

population <- read_csv(here("data", "wdi_population_data.csv")) |> 
  slice(1:22) |> 
  janitor::clean_names() %>%
  mutate(across(matches("_yr"), ~ as.numeric(.))) %>%
  pivot_longer(cols = x2015_yr2015:x2023_yr2023, 
               names_to = "year", 
               values_to = "population") |> 
  mutate(year = str_sub(year, start = -4, end = -1), 
         year = as.integer(year)) 

population_estimates <- crossing(country = population$country_name, year = 2013:2023) |> 
  left_join(population |> 
              select(year, country = country_name, population), 
            by = c("year", "country")) |> 
  group_by(country) %>% 
  fill(population, .direction = "updown") |> 
  mutate(country = case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
                             str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea", 
                             country == "Viet Nam" ~ "Vietnam", 
                             TRUE ~ country))

```


The chunk below loads in the original data. I'm thinking that for reproducibility, I can load the filtered datasets in compressed RDS files up to github. And maybe keep the originals in the gitignore folder 

```{r data, message=FALSE}


ged241 <- readRDS(here("data", "ged241.rds"))

acled <- rbind(
  read_csv(here("raw_data", "2015-05-25-2024-05-25-East_Asia.csv")), 
  read_csv(here("raw_data", "2015-05-25-2024-05-25-Oceania.csv")),
  read_csv(here("raw_data", "2015-05-25-2024-05-25-South_Asia.csv")),
  read_csv(here("raw_data", "2015-05-25-2024-05-25-Southeast_Asia.csv")), 
  # for the dates that you missed
  read_csv(here("raw_data", "2013-01-01-2015-05-24-East_Asia-Oceania-South_Asia-Southeast_Asia.csv")) 
  ) |> 
  filter(year >= 2013 & year < 2024) |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"))

acled_country_list <- acled |>
  count(country, region, iso)

# Less Afghanistan, Kyrgyzstan and Tajikistan 
ged <- ged241 |> 
  filter(date_start < "2024-01-01" & date_start >= "2013-01-01") |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |> 
  filter(country %in% acled_country_list$country)


acled <- acled |> 
  mutate(is_ged = ifelse(country %in% ged$country, "yes", "no")) |> 
  mutate(is_protest = ifelse(event_type == "Protests", "yes", "no"))

population <- read_csv(here("data", "wdi_population_data.csv")) |> 
  slice(1:22) |> 
  janitor::clean_names() %>%
  mutate(across(matches("_yr"), ~ as.numeric(.))) %>%
  pivot_longer(cols = x2015_yr2015:x2023_yr2023, 
               names_to = "year", 
               values_to = "population") |> 
  mutate(year = str_sub(year, start = -4, end = -1), 
         year = as.integer(year)) 

population_estimates <- crossing(country = population$country_name, year = 2013:2023) |> 
  left_join(population |> 
              select(year, country = country_name, population), 
            by = c("year", "country")) |> 
  group_by(country) %>% 
  fill(population, .direction = "updown") |> 
  mutate(country = case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
                             str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea", 
                             country == "Viet Nam" ~ "Vietnam", 
                             TRUE ~ country)) 


```


## Shapefiles 

```{r}
world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE)

```

# ACLED

### Filtered dataset


```{r}
acled_filtered_list <- acled |> 
  count(country) |> 
  # filter(country != "Taiwan") |> 
  filter(n > 400) |>
  pull(country)

acled_filtered <- acled |> 
  filter(country %in% acled_filtered_list) 
```

```{r eval=FALSE}
acled_filtered |> write_rds(here("data", "acled_filtered.rds"), 
                            compress = c("gz"))
```



```{r}
acled |> 
  group_by(country, is_protest) |> 
  summarise(count = n(), .groups = "drop") |>
  pivot_wider(names_from = is_protest, 
              values_from = count) |> 
  mutate(events = no + yes) |> 
  filter(events > 400) 
```




```{r}
acled_filtered |> 
  filter(event_type != "Protest") |> 
  group_by(country) |> 
  summarise(events = n()) |>
  arrange(desc(events))
```

```{r}
most_events_list <- acled_filtered |> 
  filter(event_type != "Protest") |> 
  group_by(country) |> 
  summarise(events = n()) |> 
  arrange(desc(events)) |> 
  pull(country)

most_fatalities_list <- acled_filtered |> 
  group_by(country) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE)) |> 
  arrange(desc(fatalities)) |> 
  filter(fatalities > 10) |> 
  pull(country)

```

### Plots by frequency

```{r}
acled_filtered |> 
  filter(country %out% c("Australia", "Japan", "Mongolia", "New Zealand", "South Korea")) |> 
  group_by(country, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE), 
            .groups = "drop") |> 
  left_join(population_estimates, 
            by = c("country", "year")) |>
  mutate(date = as.Date(paste(year, 1, 1, sep="-")), 
         fatalities_100k = fatalities / population * 100000, 
         country = fct_relevel(country, most_fatalities_list)) |>
  ggplot(aes(x = date, y = fatalities)) + 
  geom_smooth(alpha = .1, colour = "red") + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y", 
               date_breaks = "2 years") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Conflict fatalities in the Asia-Pacific, 2013-2023", 
       y = "Fatalities", 
       x = "")
```


```{r}
acled_filtered |> 
  filter(country %out% c("Australia", "Japan", "Mongolia", "New Zealand", "South Korea")) |> 
  group_by(country, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE), 
            .groups = "drop") |> 
  left_join(population_estimates, 
            by = c("country", "year")) |>
  mutate(date = as.Date(paste(year, 1, 1, sep="-")), 
         fatalities_100k = fatalities / population * 100000, 
         country = fct_relevel(country, most_fatalities_list)) |>
  arrange(country) |> 
  ggplot(aes(x = date, y = fatalities_100k)) + 
  geom_smooth(alpha = .1, colour = "red") + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y", 
               date_breaks = "2 years") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Conflict fatalities per 100k in the Asia-Pacific, 2013-2023", 
       y = "Fatalities", 
       x = "")
```


```{r}
acled_filtered |> 
  filter(is_protest == "no") |> 
  group_by(country, year) |> 
  summarise(count = n(), .groups = "drop") |>
  left_join(population_estimates, 
            by = c("country", "year")) |>
  mutate(country = fct_relevel(country, most_events_list), 
         year = round(year)) |> 
  mutate(date = as.Date(paste(year, 1, 1, sep="-"))) |> 
  mutate(events_100k = count / population * 100000) |> 
  ggplot(aes(x = date, y = count)) + 
  geom_smooth(alpha = .2) + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Conflict events in the Asia Pacific, 2013-2023")
```

```{r}
acled_filtered |> 
  filter(is_protest == "yes") |> 
  group_by(country, year) |> 
  summarise(count = n(), .groups = "drop") |>
  left_join(population_estimates, 
            by = c("country", "year")) |> 
  mutate(country = fct_relevel(country, most_events_list)) |> 
  mutate(date = as.Date(paste(year, 1, 1, sep="-"))) |> 
  mutate(events_100k = count / population * 100000) |> 
  ggplot(aes(x = date, y = count)) + 
  geom_smooth(alpha = .2, colour = "salmon") + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Protest events in the Asia Pacific, 2013-2023")

```



```{r}
acled_filtered |> 
   filter(country == "India") |> 
  count(event_type)
```


```{r}
acled_filtered |> 
  group_by(country, year) |> 
  summarise(count = n(), .groups = "drop") |>
  left_join(population_estimates, 
            by = c("country", "year")) |> 
  mutate(country = fct_relevel(country, most_events_list)) |> 
  mutate(events_100k = count / population * 100000) |> 
  ggplot(aes(x = year, y = events_100k)) + 
  geom_smooth(alpha = .2, colour = "seagreen") + 
  geom_line(aes(group = country)) + 
  facet_wrap(~ country, 
             scales = "free_y")  

```

### Protest and non-protest events 

Maybe have two, one for protest events and one for non-protest events
And then have the axes be fatalities per capita and events per capita, with the sizes indicating fatalities 

```{r}
acled_filtered |> 
  group_by(event_type) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE))
```


```{r}
acled_filtered |> 
  filter(is_protest == "no") |> 
  group_by(country, is_protest, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE),
            events = n(), 
            .groups = "drop") |> 
  left_join(population_estimates |> 
              mutate(year = as.double(year)), 
            by = c("country", "year")) |>
  mutate(fatalities_100k = fatalities / population * 100000, 
         events_100k = events / population * 100000) |> 
  ggplot(aes(x = events_100k, y = fatalities_100k)) + 
  geom_text(aes(label = country), 
            size = 1.5, 
            colour = "grey", 
            alpha = .7) + 
  geom_point(aes(colour = is_protest, size = fatalities), 
             alpha = .8, 
             colour = "#f89540") + 
  # scale_colour_viridis_d(option = "plasma", 
  #                        begin = .2, end = .8, 
  #                        direction = -1) +
  scale_x_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_y_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_size_continuous(breaks = c(10, 5000, 10000, 15000)) +
  facet_wrap(~year) + 
  theme(axis.text.x = element_text(angle = 60, hjust = .8, vjust = 1, size = 8), 
        axis.text.y = element_text(size = 8))
```



```{r}
acled_filtered |> 
  filter(is_protest == "yes") |> 
  group_by(country, is_protest, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE),
            events = n(), 
            .groups = "drop") |> 
  left_join(population_estimates |> 
              mutate(year = as.double(year)), 
            by = c("country", "year")) |>
  mutate(fatalities_100k = fatalities / population * 100000, 
         events_100k = events / population * 100000) |> 
  ggplot(aes(x = events_100k, y = fatalities_100k)) + 
  geom_text(aes(label = country), 
            size = 1.5, 
            colour = "darkgrey", 
            alpha = .8) + 
  geom_point(aes(colour = is_protest, size = fatalities), 
             alpha = .8, 
             colour = "#9c179e") + 
  # scale_colour_viridis_d(option = "plasma", 
  #                        begin = .2, end = .8, 
  #                        direction = -1) +
  scale_x_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_y_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_size_continuous(breaks = c(0, 10, 100, 1000)) +
  facet_wrap(~year) + 
  theme(axis.text.x = element_text(angle = 60, hjust = .8, vjust = 1, size = 8), 
        axis.text.y = element_text(size = 8))
```



```{r}
ged |>
  count(country)

ged241 |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |> 
  filter(date_start < "2024-05-25" & date_start > "2014-05-23") |> 
  filter(region == "Asia") |> 
  count(country)
```


```{r}
acled |> 
  mutate(fatalities = parse_number(fatalities)) |> 
  group_by(country, year) |> 
  summarise(fatalities = sum(fatalities))

acled |> count(year)

acled |> filter(year != "2024")
```

```{r}
ged241 |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |> 
  count(country, country_id) |> 
  filter(country %in% acled_country_list$country)
```



```{r}
acled_country_list <- acled |> count(country, iso)
```

### Sources

```{r warning = FALSE}
acled_filtered |> glimpse()

acled_sources <- acled_filtered |>
  select(event_id_cnty, country, event_date, source, notes) |>
  # This is crazy, this is too many sources
  # However the curation of their sources has tremendously improved
  separate(source, sep = "; ", into = paste("source", 1:31, sep = "_")) |> 
  pivot_longer(cols = c(source_1:source_31), names_to = "ignore", values_to = "source") %>% 
  filter(!is.na(source)) |> 
  select(-ignore) |> 
  group_by(event_id_cnty) |> 
  mutate(source_count = n()) |> 
  ungroup() 


```


# GED

### Sources


```{r}
ged_sources <-  ged |> 
  select(id, source_office) |> 
  # A lot of strange repeats
  separate(source_office, sep = ";", into = paste0("source_", 1:6), remove = FALSE) |> 
  pivot_longer(cols = c(source_1:source_6), 
               names_to = "remove", 
               values_to = "source") |> 
  select(-remove) |> 
  filter(!is.na(source)) |> 
  mutate(count = 1) |> 
  group_by(source, id) |> 
  summarise(count = sum(count), .groups = "drop") |> 
  select(-count) 

# Separating into two parts because the part above throws an error
ged_sources <- ged_sources |> 
  count(id, source) |> 
  mutate(source = case_when(source %in% c("AFP", "Agence Frace Presse") ~ "Agence France Presse",
                            source == "Aljazeera" ~ "Al Jazeera", 
                            source == "Al Jazeera English" ~ "Al Jazeera", 
                            source == "Amnesty" ~ "Amnesty International", 
                            source == "Antara" ~ "Antara News", 
                            source %in% c("Associated Press Newswires", 
                                          "AP", "AP News", "The Associated Press") ~ 
                              "Associated Press",
                            str_detect(source, "BBC Monitoring") ~ "BBC Monitoring", 
                            source %in% c("BBC News", "BBC News Asia", "BBC News World") ~ "BBC", 
                            source %in% c("BNI", "BNI online", "Burma News International") ~ 
                              "BNI Multimedia Group", 
                            source == "BenarNews" ~ "Benar News", 
                            source == "Burmalink" ~ "Burma Link", 
                            source == "CNN Indonesia" ~ "CNN", 
                            str_detect(source, "Crisis Watch|Crsis Watch|Crisiswatch") ~ 
                              "CrisisWatch", 
                            source == "Daily Exelsior" ~ "Daily Excelsior", 
                            source == "DhakaTribune" ~ "Dhaka Tribune", 
                            source == "Dwan" ~ "Dawn", 
                            str_detect(source, "Eleven") ~ "Eleven Media Group", 
                            source == "Forify Rights" ~ "Fortify Rights", 
                            str_detect(source, "Free Burma Ran") ~ "Free Burma Rangers", 
                            source == "HRW" ~ "Human Rights Watch", 
                            source %in% c("Global New Lights of Myanmar", 
                                          "Global light of Myanmar", 
                                          "Global New Light Of Myanmar") ~ 
                              "Global New Light of Myanmar", 
                            str_detect(source, "ICG|International Crisis Group") ~ 
                              "International Crisis Group", 
                            source %in% c("India Express", "The Indian Epxress") ~ 
                              "Indian Express", 
                            str_detect(source, "International Security") ~ 
                              "International Security",
                            str_detect(source, "Kachin News") ~ 
                              "Kachin News Group",
                            str_detect(source, "Kachin Women's Association") ~ 
                              "Kachin Women's Association Thailand",
                            str_detect(source, "Kantarawaddy") ~ 
                              "Kantarawaddy Times",
                            str_detect(source, "Kachin News") ~ 
                              "Kachin News Group",
                            str_detect(source, "Mizzima") ~ 
                              "Mizzima",
                            source == "Mon News" ~ "Mon News Agency", 
                            source == "Myanmar NowShan Human Rights Foundation" ~ 
                              "Shan Human Rights Foundation", 
                            str_detect(source, "Myanmar Peace Monitor|mmpeacemonitor|Mmpeacemonitor") ~ 
                              "Myanmar Peace Monitor", 
                            source == "Narinjara via BNI Multimedia Group" ~ "Narinjara News", 
                            str_detect(source, "SATP|SATp|STP|satp|sato|STp") ~ 
                              "South Asia Terrorism Portal", 
                            str_detect(source, "PIPS Pakistan Security Report") ~ 
                              "PIPS Pakistan Security Report", 
                            source == "PNA" ~ "PNA (Philippines News Agency)", 
                            str_detect(source, "PSLF|TNLA|pslf") ~ "PSLF/TNLA", 
                            source == "Pajhwok News" ~ "Pajhwok Afghan News", 
                            str_detect(source, "Radio New Zealand") ~ "Radio New Zealand", 
                            str_detect(source, "Samaa") ~ "Samaa TV", 
                            source %in% c("Scroll India", "Scroll (India)") ~ "Scroll.in", 
                            source %in% c("Tempo", "Tempo Indonesia", 
                                          "Tempco News", "Tempo News") ~ "Tempo.co", 
                            str_detect(source, "Than Lwin Times") ~ "Than Lwin Times", 
                            source == "The Bureau of Investigate Journalism" ~ 
                              "The Bureau of Investigative Journalism",
                            source == "The Canadian Press - Broadcast wire" ~ 
                              "The Canadian Press", 
                            source %in% c("The Irradwaddy", "The Irrawaddi", "The Irrawaddy", 
                                          "The Irrawaddy Online", "The Irrawady", "The Irrawassy", 
                                          "The rrawaddy", "he Irrawaddy Online", "Irrawaddy", 
                                          "The Irrawaday") ~ 
                              "The Irrawaddy", 
                            source == "The Nation Thailand" ~ 
                              "The Nation",
                            source == "The New Yprk Times" ~ "The New York Times", 
                            source %in% c("The News (Pakistan)") ~ "The News International",
                            source == "The Patriot ndia" ~ "The Patriot India",
                            source == "The Print (India)" ~ "The Print", 
                            source == "The Shan Herald Agency for News" ~ 
                              "Shan Herald Agency for News", 
                            source == "The Stateless Rohinghya" ~ "The Stateless Rohingya", 
                            str_detect(source, "Times of India") ~ "The Times of India", 
                            source == "The Wall Street Journal Online" ~ "The Wall Street Journal", 
                            source %in% c("The Wire", "thewire.in", "Wire") ~ "Wire (India)", 
                            source %in% c("United Nations Human Rights Council",
                                          "Human Rights Council") ~ 
                              "UN Human Rights Council", 
                            str_detect(source, "HIGH COMMISSIONER FOR HUMAN RIGHTS") ~ "UN OHCHR", 
                            source == "Voi" ~ "VOI.id", 
                            str_detect(source, "Xinhua") ~ "Xinhua",
                            source == "Zee News India" ~ "Zee News (India)", 
                            source %in% c("bdnews´24.com", "bdnews24.com") ~ "BD News24",
                            source == "indiatoday.in" ~ "India Today", 
                            source == "www.thehindu.com" ~ "The Hindu", 
                            source == "www,thequint.com" ~ "The Quint",
                            source == "the Balochistan Post" ~ "The Balochistan Post",
                            source == "www.newindianexpress.com"  ~ "New Indian Express",
                            str_detect(source, "ABS-CBN") ~ "ABS-CBN",
                            str_detect(source, "Antara News En") ~ "Antara News", 
                            str_detect(source, "ATP Maharasthtra|Chhattisgarh|Jharkhand") ~ 
                              "South Asia Terrorism Portal",
                            source == "Burma Free Rangers" ~ "Free Burma Rangers", 
                            source == "India TodayNE" ~ "India Today", 
                            source == "Philippine Daily Inquirer" ~ "Inquirer.net", 
                            source == "RFA" ~ "Radio Free Asia", 
                            source %in% c("SAP", "ATP", "SAT") ~ "South Asia Terrorism Portal",
                            str_detect(source, "Thaiger") ~ "The Thaiger", 
                            source == "The New Indian Express" ~ "New Indian Express", 
                            source == "business-standard.com" ~ "Business Standard", 
                            source == "Dawn News" ~ "Dawn (Pakistan)", 
                            str_detect(source, "Kachin Women") ~ 
                              "Kachin Women's Association Thailand",
                            source == "hindustantimes" ~ "Hindustan Times", 
                            str_detect(source, "Voice of America") ~ "VOA", 
                            TRUE ~ source)) |> 
  mutate(source = str_trim(source)) |> 
  group_by(source, id) |> 
  summarise(num_sources = sum(n), .groups = "drop") |> 
  left_join(ged |> 
              select(id, year, country, source_headline), 
            by = c("id"))


  
```

```{r}
acled_sources |> glimpse()

acled_sources |> count(country)
```
# Comparison

### Comparing sources

```{r}

ged_source_order <- ged_sources |> 
  filter(country != "Australia") |>
  group_by(country) |> 
  summarise(num_sources = n_distinct(source)) |> 
  arrange(desc(num_sources)) |> 
  pull(country)

acled_sources |> 
  filter(country %in% ged_source_order) |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"), 
         year = year(event_date)) |> 
  group_by(country, year) |> 
  summarise(num_sources = n_distinct(source), .groups = "drop") |> 
  mutate(dataset = "ACLED") |>
  rbind(
    ged_sources |>
      filter(country != "Australia") |>
      group_by(country, year) |>
      summarise(num_sources = n_distinct(source), .groups = "drop") |> 
      mutate(dataset = "UCDP")
  ) |> 
  mutate(country = fct_relevel(country, ged_source_order)) |> 
  ggplot(aes(x = year, y = num_sources, fill = dataset)) + 
  geom_col() +
  facet_wrap(~ country) + 
  scale_fill_viridis_d(option = "magma", 
                       begin = .2, end = .7,
                       direction = -1) +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) + 
  labs(title = "Sources used in the ACLED and UCDP datasets, selected countries", 
       x = "", y = "Number of distinct sources",
       fill = "Dataset") + 
  scale_x_continuous(breaks = c(2013, 2015, 2017, 2019, 2021, 2023))
  
```




```{r}
ged |> filter(source_office == "SAT") |> sample_n(1) |> pull(source_article)
ged |> filter(str_detect(source_office, "Voice of America")) |> sample_n(1) |> pull(source_article)

```

### Comparing actors 

```{r}
interaction_codes_acled <- tribble(~interaction_code,	~description,
10,	"SOLE STATE FORCES ACTION (e.g. base establishment by state forces; remote violence involving state military with no reported casualties; non-violent military operations)",
11,	"STATE FORCES VERSUS STATE FORCES (e.g. military infighting; battles between a military and mutinous forces; arrests of military officials)",
12,	"STATE FORCES VERSUS REBELS (e.g. civil war violence between state forces and a rebel actor)",
13,	"STATE FORCES VERSUS POLITICAL MILITIA (e.g. violence between state forces and unidentified armedgroups; violence between police and political party militias)",
14,	"STATE FORCES VERSUS IDENTITY MILITIA (e.g. military engagement with a communal militia)",
15,	"STATE FORCES VERSUS RIOTERS (e.g. suppression of a violent demonstration by police or military)",
16,	"STATE FORCES VERSUS PROTESTERS (e.g. suppression of a peaceful demonstration by police or military)",
17,	"STATE FORCES VERSUS CIVILIANS (e.g. state repression of civilians; arrests by police)",
18,	"STATE FORCES VERSUS EXTERNAL/OTHER FORCES (e.g. inter-state conflict; state engagement with private security forces or a UN operation; strategic developments between a regime and the UN or another external actor)",
20,	"SOLE REBEL ACTION (e.g. base establishment; remote violence involving rebel groups with no reported target; accidental detonation by a rebel group)",
22,	"REBELS VERSUS REBELS (e.g. rebel infighting; violence between rebel groups and their splinter movements)",
23,	"REBELS VERSUS POLITICAL MILITIA (e.g. civil war violence between rebels and a pro-government militia; violence between rebels and unidentified armed groups)",
24,	"REBELS VERSUS IDENTITY MILITIA (e.g. violence between rebels and local security providers)",
25,	"REBELS VERSUS RIOTERS (e.g. spontaneous violence against a rebel group; a violent demonstration engaging a rebel group)",
26,	"REBELS VERSUS PROTESTERS (e.g. violence against protesters by rebels)",
27,	"REBELS VERSUS CIVILIANS (e.g. rebel targeting of civilians [a strategy commonly used in civil war])",
28,	"REBELS VERSUS OTHERS (e.g. civil war violence between rebels and an allied state military; rebel violence against a UN operation)",
30,	"SOLE POLITICAL MILITIA ACTION (e.g. remote violence by an unidentified armed group with no reported target; accidental detonation by a political militia; strategic arson as intimidation by a political party)",
33,	"POLITICAL MILITIA VERSUS POLITICAL MILITIA (e.g. inter-elite violence)",
34,	"POLITICAL MILITIA VERSUS IDENTITY MILITIA (e.g. violence between communal militia and an unidentified armed group; violence between political militia and local security providers)",
35,	"POLITICAL MILITIA VERSUS RIOTERS (e.g. violent demonstration against a political militia; spontaneous violence against a political militia)",
36,	"POLITICAL MILITIA VERSUS PROTESTERS (e.g. suppression of a peaceful demonstration by a political militia)",
37,	"POLITICAL MILITIA VERSUS CIVILIANS (e.g. out-sourced state repression carried out by pro-government militias; civilian targeting by political militias or unidentified armed groups)",
38,	"POLITICAL MILITIA VERSUS OTHERS (e.g. violence between private security forces and unidentified armed groups; violence between pro-government militia and external state military forces)",
40,	"SOLE IDENTITY MILITIA ACTION (e.g. destruction of property by a communal militia; establishment of a local security militia)",
44,	"IDENTITY MILITIA VERSUS IDENTITY MILITIA (e.g. inter-communal violence)",
45,	"IDENTITY MILITIA VERSUS RIOTERS (e.g. violent demonstration against an identity militia; spontaneous violence against an identity militia)",
46,	"IDENTITY MILITIA VERSUS PROTESTERS (e.g. suppression of a peaceful demonstration by  an identity militia)",
47,	"IDENTITY MILITIA VERSUS CIVILIANS (e.g. civilian targeting, especially in the context of inter-communal violence)",
48,	"IDENTITY MILITIA VERSUS OTHER (e.g. external state military engaging in violence against a communal militia)",
50,	"SOLE RIOTER ACTION (e.g. one-sided violent demonstration; spontaneous arson)",
55,	"RIOTERS VERSUS RIOTERS (e.g. two-sided violent demonstration in which both sides engage in violence)",
56,	"RIOTERS VERSUS PROTESTERS (e.g. two-sided demonstration in which only one side engages in violence)",
57,	"RIOTERS VERSUS CIVILIANS (e.g. violent demonstration in which civilians are injured/killed; spontaneous violence in which civilians are targeted by a mob)",
58,	"RIOTERS VERSUS OTHERS (e.g. mob violence against regional or international operation)",
60,	"SOLE PROTESTER ACTION (e.g. one-sided peaceful protest)",
66,	"PROTESTERS VERSUS PROTESTERS (e.g. two-sided peaceful protest)",
67,	"PROTESTERS VERSUS CIVILIANS (e.g. peaceful protesters engaging civilians)",
68,	"PROTESTERS VERSUS OTHER (e.g. suppression of a peaceful demonstration by private security forces)",
70,	"SOLE CIVILIAN ACTION (e.g. one-sided strategic development)",
77,	"CIVILIANS VERSUS CIVILIANS (e.g. peaceful interactions between civilians recorded as ‘Strategic developments’)",
78,	"OTHER ACTOR VERSUS CIVILIANS (e.g. regional or international operation targeting civilians; private security forces targeting civilians)",
80,	"SOLE OTHER ACTION (e.g. strategic developments involving international or regional operations; remote violence by external military forces with no reported target; non-violent external military operations)",
88,	"OTHER VERSUS OTHER (e.g. clashes between foreign state forces, international missions, or private security forces)") |> 
  mutate(simple_description = str_to_title(str_extract(description, "\\b[A-Z](?:[A-Z ]*[A-Z])?\\b")))
```

```{r}
actor_codes_acled <- tribble(
  ~actor_code, ~description, 
  1, "State Forces", 
  2, "Rebel Groups", 
  3, "Political Militias", 
  4, "Identity Militias", 
  5, "Rioters",
  6, "Protesters", 
  7, "Civilians", 
  8, "Other Forces"
)
```


The dataset actors are actually very well-cleaned, especially compared to before 

```{r}
acled_actors <- rbind(
  acled_filtered |>
    select(actor = actor1, actor_code = inter1, event_id_cnty),
  
  acled_filtered |> 
    select(actor = actor2, actor_code = inter2, event_id_cnty)
  
  ) |> 
  left_join(acled_filtered |> 
              select(event_id_cnty, interaction, event_date, country), 
            by = "event_id_cnty",
            relationship = "many-to-many") |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"), 
         year = year(event_date)) |> 
  left_join(actor_codes_acled |>
              rename(actor_description = description), 
            by = "actor_code", 
            relationship = "many-to-many")
  
```

```{r}
acled_actors_order <- acled_actors |> 
  filter(country != "Australia") |> 
  group_by(country) |> 
  summarise(num_actors = n_distinct(actor)) |> 
  arrange(desc(num_actors)) |> 
  pull(country)
```



```{r}
acled_actors |> 
  filter(country != "Australia") |> 
  group_by(country, year, actor_description) |> 
  summarise(num_actors = n_distinct(actor), .groups = "drop") |> 
  filter(!is.na(actor_description)) |> 
  mutate(country = fct_relevel(country, acled_actors_order)) |> 
  ggplot(aes(x = year, y = num_actors, group = actor_description)) + 
  geom_col(aes(fill = actor_description)) + 
  facet_wrap(~country, scales = "free_y") + 
  scale_fill_viridis_d(option = "turbo")
```


```{r}
acled_filtered |> glimpse()
  select(actor1, actor2, event_id_cnty, country, interaction) |> 
  pivot_longer(cols = c(actor1, actor2), 
               names_to = "order", 
               values_to = "actor") |> 
  filter(!is.na(actor))  

  summarise(count = sum(count)) |> 
  ggplot(aes(x = count))
  
acled_filtered |> 
  filter(country == "Myanmar") |> 
  distinct(actor1)
```


### Comparing event types 










