---
title: "Initial exploratory data analysis of ACLED-UCDP conflict trends"
author: "Sean Ng"
date: "13 June 2024"
toc: true
toc-location: left
toc-depth: 4
format: 
  html:
    page-layout: full
    code-tools: true
    self-contained: true
---

```{r setup}


library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

```


# Data


## Country list 

From UNDP 

```{r}
country_list <- c("Afghanistan", "Bangladesh", "Bhutan", "Cambodia", 
                  "China", "Fiji", "Hong Kong", "India", "Indonesia", 
                  "Iran", "North Korea", "South Korea", "Laos", 
                  "Malaysia", "Maldives", "Mongolia", "Myanmar", 
                  "Nepal", "Pakistan", "Papua New Guinea", "Philippines", 
                  "Solomon Islands", "Sri Lanka", "Thailand", "Timor-Leste", 
                  "Vanuatu", "Vietnam")
```

## Compressed data

Run this if you don't need the original files. This will read in the data from two .RDS files, which are compressed and also remove the danger of one opening .CSVs in Excel, which would break some of them due to Excel's row limits. 

Population estimates are frm WDI. 

```{r compressed data, message=FALSE}

ged241 <- readRDS(here("data", "ged241.rds"))

acled_filtered <- readRDS(here("data", "acled_filtered.rds"))


ged <- ged241 |> 
  filter(date_start < "2024-01-01" & date_start >= "2014-01-01") |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |>
  filter(country %in% country_list)

```





## Originals 

The chunk below loads in the original data. I'm thinking that for reproducibility, I can load the filtered datasets in compressed RDS files up to github. And maybe keep the originals in the gitignore folder 

```{r raw-data, include=FALSE, message=FALSE, eval=FALSE}


ged241 <- readRDS(here("data", "ged241.rds"))

acled <- rbind(
  read_csv(here("raw_data", "2015-05-25-2024-05-25-East_Asia.csv")), 
  read_csv(here("raw_data", "2015-05-25-2024-05-25-Oceania.csv")),
  read_csv(here("raw_data", "2015-05-25-2024-05-25-South_Asia.csv")),
  read_csv(here("raw_data", "2015-05-25-2024-05-25-Southeast_Asia.csv")), 
  # for the dates that you missed
  read_csv(here("raw_data", "2013-01-01-2015-05-24-East_Asia-Oceania-South_Asia-Southeast_Asia.csv")),
  # Countries outside of the above regions but still in UNDP region
  read_csv(here("raw_data", "2013-01-01-2024-05-25-Afghanistan.csv")),
  read_csv(here("raw_data", "2013-01-01-2024-05-25-Iran.csv"))
  ) |> 
  filter(year >= 2014 & year < 2024) |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"))

acled_country_list <- acled |>
  count(country, region, iso)

# Less Afghanistan, Kyrgyzstan and Tajikistan 
ged <- ged241 |> 
  filter(date_start < "2024-01-01" & date_start >= "2014-01-01") |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |> 
  filter(country %in% acled_country_list$country)


acled <- acled |> 
  mutate(is_ged = ifelse(country %in% ged$country, "yes", "no")) |> 
  mutate(is_protest = ifelse(event_type == "Protests", "yes", "no"))


```

### ACLED filtered

This is the process for making the .RDS

```{r}

acled_filtered <- acled |> 
  mutate(country = ifelse(country == "East Timor", "Timor-Leste", country), 
         country = ifelse(admin1 == "Hong Kong", "Hong Kong", country)) |> 
  filter(country %in% country_list) |> 
  mutate(fatalities = parse_number(fatalities)) 
```

```{r eval=FALSE}
acled_filtered |> write_rds(here("data", "acled_filtered.rds"), 
                            compress = c("gz"))
```


## Population

```{r}
population <- read_csv(here("data", "wdi_population_data.csv")) |> 
  slice(1:27) |> 
  janitor::clean_names() %>%
  mutate(across(matches("_yr"), ~ as.numeric(.))) %>%
  pivot_longer(cols = x2015_yr2015:x2023_yr2023, 
               names_to = "year", 
               values_to = "population") |> 
  mutate(year = str_sub(year, start = -4, end = -1), 
         year = as.integer(year)) |> 
  rename(country = country_name) |> 
  mutate(country = case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
                             str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea", 
                             str_detect(country, "Hong Kong SAR, China") ~ "Hong Kong", 
                             str_detect(country, "Iran, Islamic Rep.") ~ "Iran", 
                             str_detect(country, "Lao PDR") ~ "Laos", 
                             country == "Viet Nam" ~ "Vietnam", 
                             TRUE ~ country))

population_estimates <- crossing(country = population$country, year = 2014:2023) |> 
  left_join(population |> 
              select(year, country, population), 
            by = c("year", "country")) |> 
  group_by(country) %>% 
  fill(population, .direction = "updown") 
```



## Shapefiles 

```{r}
world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE)

myanmar_adm1 <- st_read(here("data", 
                             "mmr_polbnda2_adm1_mimu_250k", 
                             "mmr_polbnda2_adm1_mimu_250k.shp"), 
                        quiet = TRUE) |> 
  rename(state = ST, 
        admin1_pcode = ST_PCODE) |> st_as_sf()

```


```{r}
country_iso3 <- world_shape |> 
  distinct(name, iso3)
```


# ACLED




```{r}
most_events_list <- acled_filtered |> 
  filter(event_type != "Protest") |> 
  group_by(country) |> 
  summarise(events = n()) |> 
  arrange(desc(events)) |> 
  pull(country)

most_fatalities_list <- acled_filtered |> 
  group_by(country) |> 
  mutate(fatalities = as.numeric(fatalities)) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE)) |> 
  arrange(desc(fatalities)) |> 
  filter(fatalities > 10) |> 
  pull(country)

```

### Plots by frequency

#### Conflict fatalities

```{r warning = FALSE}
acled_filtered |> 
  filter(country %in% most_fatalities_list) |> 
  mutate(fatalities = parse_number(fatalities)) |> 
  group_by(country, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE), 
            .groups = "drop") |> 
  left_join(population_estimates, 
            by = c("country", "year")) |>
  mutate(date = as.Date(paste(year, 1, 1, sep="-")), 
         fatalities_100k = fatalities / population * 100000, 
         country = fct_relevel(country, most_fatalities_list)) |>
  ggplot(aes(x = date, y = fatalities)) + 
  geom_smooth(alpha = .1, colour = "red") + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y", 
               date_breaks = "2 years") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  scale_y_continuous(labels = comma) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Conflict fatalities in the Asia-Pacific, 2013-2023", 
       y = "Annual fatalities", 
       x = "")
```

Doesn't really work that well 

```{r}
acled_filtered |> 
  filter(country %in% most_fatalities_list) |> 
  group_by(country, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE), 
            .groups = "drop") |> 
  left_join(population_estimates, 
            by = c("country", "year")) |>
  mutate(date = as.Date(paste(year, 1, 1, sep="-")), 
         fatalities_100k = fatalities / population * 100000, 
         country = fct_relevel(country, most_fatalities_list)) |>
  arrange(country) |> 
  ggplot(aes(x = date, y = fatalities_100k)) + 
  geom_smooth(alpha = .1, colour = "red") + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y", 
               date_breaks = "2 years") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Conflict fatalities per 100k in the Asia-Pacific, 2013-2023", 
       y = "Fatalities", 
       x = "")
```


```{r}
acled_filtered |> 
  filter(is_protest == "no") |> 
  group_by(country, year) |> 
  summarise(count = n(), .groups = "drop") |>
  left_join(population_estimates, 
            by = c("country", "year")) |>
  mutate(country = fct_relevel(country, most_events_list), 
         year = round(year)) |> 
  mutate(date = as.Date(paste(year, 1, 1, sep="-"))) |> 
  mutate(events_100k = count / population * 100000) |> 
  ggplot(aes(x = date, y = count)) + 
  geom_smooth(alpha = .2) + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Conflict events in the Asia Pacific, 2013-2023")
```

```{r}
acled_filtered |> 
  filter(is_protest == "yes") |> 
  group_by(country, year) |> 
  summarise(count = n(), .groups = "drop") |>
  left_join(population_estimates, 
            by = c("country", "year")) |> 
  mutate(country = fct_relevel(country, most_events_list)) |> 
  mutate(date = as.Date(paste(year, 1, 1, sep="-"))) |> 
  mutate(events_100k = count / population * 100000) |> 
  ggplot(aes(x = date, y = count)) + 
  geom_smooth(alpha = .2, colour = "salmon") + 
  geom_line(aes(group = country)) + 
  scale_x_date(date_labels = "%Y") + 
  facet_wrap(~ country, 
             scales = "free_y") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) + 
  labs(title = "Protest events in the Asia Pacific, 2013-2023")

```



```{r}
acled_filtered |> 
   filter(country == "India") |> 
  count(event_type)
```


```{r}
acled_filtered |> 
  group_by(country, year) |> 
  summarise(count = n(), .groups = "drop") |>
  left_join(population_estimates, 
            by = c("country", "year")) |> 
  mutate(country = fct_relevel(country, most_events_list)) |> 
  mutate(events_100k = count / population * 100000) |> 
  ggplot(aes(x = year, y = events_100k)) + 
  geom_smooth(alpha = .2, colour = "seagreen") + 
  geom_line(aes(group = country)) + 
  facet_wrap(~ country, 
             scales = "free_y")  

```

### Protest and non-protest events 

Maybe have two, one for protest events and one for non-protest events
And then have the axes be fatalities per capita and events per capita, with the sizes indicating fatalities 

```{r}
acled_filtered |> 
  group_by(event_type) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE))
```


```{r fig.height=7}
acled_filtered |> 
  filter(is_protest == "no") |> 
  group_by(country, is_protest, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE),
            events = n(), 
            .groups = "drop") |> 
  left_join(population_estimates |> 
              mutate(year = as.double(year)), 
            by = c("country", "year")) |>
  mutate(fatalities_100k = fatalities / population * 100000, 
         events_100k = events / population * 100000) |> 
  ggplot(aes(x = events_100k, y = fatalities_100k)) + 
  geom_text(aes(label = country), 
            size = 1.5, 
            colour = "grey", 
            alpha = .7) + 
  geom_point(aes(colour = is_protest, size = fatalities), 
             alpha = .8, 
             colour = "#f89540") + 
  # scale_colour_viridis_d(option = "plasma", 
  #                        begin = .2, end = .8, 
  #                        direction = -1) +
  scale_x_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_y_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_size_continuous(breaks = c(10, 5000, 10000, 15000)) +
  facet_wrap(~year) + 
  theme(axis.text.x = element_text(angle = 60, hjust = .8, vjust = 1, size = 8), 
        axis.text.y = element_text(size = 8))
```



```{r fig.height=7}
acled_filtered |> 
  filter(is_protest == "yes") |> 
  group_by(country, is_protest, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE),
            events = n(), 
            .groups = "drop") |> 
  left_join(population_estimates |> 
              mutate(year = as.double(year)), 
            by = c("country", "year")) |>
  mutate(fatalities_100k = fatalities / population * 100000, 
         events_100k = events / population * 100000) |> 
  ggplot(aes(x = events_100k, y = fatalities_100k)) + 
  geom_text(aes(label = country), 
            size = 1.5, 
            colour = "darkgrey", 
            alpha = .8) + 
  geom_point(aes(colour = is_protest, size = fatalities), 
             alpha = .8, 
             colour = "#9c179e") + 
  # scale_colour_viridis_d(option = "plasma", 
  #                        begin = .2, end = .8, 
  #                        direction = -1) +
  scale_x_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_y_log10(breaks = c(0.001, 0.01, 0.1, 1, 10)) + 
  scale_size_continuous(breaks = c(0, 10, 100, 1000)) +
  facet_wrap(~year) + 
  theme(axis.text.x = element_text(angle = 60, hjust = .8, vjust = 1, size = 8), 
        axis.text.y = element_text(size = 8))
```






```{r}
ged241 |> 
  mutate(country = case_when(country == "Cambodia (Kampuchea)" ~ "Cambodia", 
                             country == "Myanmar (Burma)" ~ "Myanmar", 
                             TRUE ~ country)) |> 
  count(country, country_id) |> 
  filter(country %in% acled_country_list$country)
```



```{r}
acled_country_list <- acled |> count(country, iso)
```




# GED





# Comparison

### Fatalities

Events aren't really comparable between the two datasets since UCDP is conflict-based (as in a conflict dyad) as opposed to being event-based, like ACLED. 

That being said, it is possible to compare fatalities: 

Whilst both ACLED and UCDP data on fatalities seems to be correlated (c.r. Afghanistan, Pakistan, India, Philippines, Iran and Indonesia); however, ACLED seems to consistently report more fatalities than UCDP. The difference is particularly striking in Myanmar, where I believe the weaknesses of the UCDP dataset were most pronounced (overreliance on traditional media, )

```{r}
ged_country_list <- ged |> 
  filter(country != "Australia") |> 
  group_by(country) |> 
  summarise(fatalities = sum(best, na.rm = TRUE)) |> 
  arrange(desc(fatalities)) |> 
  distinct(country) |> pull()

acled_filtered |> 
  filter(event_type != "Protests" & 
           country %in% ged_country_list) |> 
  select(id = event_id_cnty, 
         fatalities, 
         country, 
         event_date, 
         year) |>
  mutate(source = "ACLED") |> 
  rbind(
    ged |>
      filter(country != "Australia") |> 
      select(id = relid, country, event_date = date_start, year, fatalities = best) |>
      mutate(source = "UCDP") 
  ) |> 
  group_by(country, source, year) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE), .groups = "drop") |> 
  mutate(country = fct_relevel(country, ged_country_list)) |>
  ggplot(aes(x = year, y = fatalities)) + 
  geom_line(aes(colour = source), 
            size = .7, 
            alpha = .9) + 
  facet_wrap(~country, scales = "free_y") +
  scale_colour_viridis_d(option = "magma", 
                       begin = .2, end = .7, 
                       direction = -1) + 
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1), 
        axis.text.y = element_text(size = 4)) + 
  labs(title = "Fatalities in the ACLED and UCDP datasets, 2014-2023", 
       x = "", y = "Annual fatalities", 
       colour = "Dataset") + 
  scale_x_continuous(breaks = c(2014, 2016, 2018, 2020, 2022)) + 
  scale_y_continuous(labels = comma)


  

```


### Sources

```{r warning = FALSE}

acled_sources <- acled_filtered |>
  select(event_id_cnty, country, event_date, source, notes) |>
  # This is crazy, this is too many sources
  # However the curation of their sources has tremendously improved
  separate(source, sep = "; ", into = paste("source", 1:31, sep = "_")) |> 
  pivot_longer(cols = c(source_1:source_31), names_to = "ignore", values_to = "source") %>% 
  filter(!is.na(source)) |> 
  select(-ignore) |> 
  group_by(event_id_cnty) |> 
  mutate(source_count = n()) |> 
  ungroup() 

acled_sources |> write_csv(here("data", "acled_sources.csv"))

```






```{r}
ged_sources <-  ged |> 
  select(id, source_office) |> 
  # A lot of strange repeats
  separate(source_office, sep = ";", into = paste0("source_", 1:6), remove = FALSE) |> 
  pivot_longer(cols = c(source_1:source_6), 
               names_to = "remove", 
               values_to = "source") |> 
  select(-remove) |> 
  filter(!is.na(source)) |> 
  mutate(count = 1) |> 
  group_by(source, id) |> 
  summarise(count = sum(count), .groups = "drop") |> 
  select(-count) 

# Separating into two parts because the part above throws an error
# See, GED doesn't clean their sources as well as ACLED
ged_sources <- ged_sources |> 
  count(id, source) |> 
  mutate(source = case_when(source %in% c("AFP", "Agence Frace Presse") ~ "Agence France Presse",
                            source == "Aljazeera" ~ "Al Jazeera", 
                            source == "Al Jazeera English" ~ "Al Jazeera", 
                            source == "Amnesty" ~ "Amnesty International", 
                            source == "Antara" ~ "Antara News", 
                            source %in% c("Associated Press Newswires", 
                                          "AP", "AP News", "The Associated Press") ~ 
                              "Associated Press",
                            str_detect(source, "BBC Monitoring") ~ "BBC Monitoring", 
                            source %in% c("BBC News", "BBC News Asia", "BBC News World") ~ "BBC", 
                            source %in% c("BNI", "BNI online", "Burma News International") ~ 
                              "BNI Multimedia Group", 
                            source == "BenarNews" ~ "Benar News", 
                            source == "Burmalink" ~ "Burma Link", 
                            source == "CNN Indonesia" ~ "CNN", 
                            str_detect(source, "Crisis Watch|Crsis Watch|Crisiswatch") ~ 
                              "CrisisWatch", 
                            source == "Daily Exelsior" ~ "Daily Excelsior", 
                            source == "DhakaTribune" ~ "Dhaka Tribune", 
                            source == "Dwan" ~ "Dawn", 
                            str_detect(source, "Eleven") ~ "Eleven Media Group", 
                            source == "Forify Rights" ~ "Fortify Rights", 
                            str_detect(source, "Free Burma Ran") ~ "Free Burma Rangers", 
                            source == "HRW" ~ "Human Rights Watch", 
                            source %in% c("Global New Lights of Myanmar", 
                                          "Global light of Myanmar", 
                                          "Global New Light Of Myanmar") ~ 
                              "Global New Light of Myanmar", 
                            str_detect(source, "ICG|International Crisis Group") ~ 
                              "International Crisis Group", 
                            source %in% c("India Express", "The Indian Epxress") ~ 
                              "Indian Express", 
                            str_detect(source, "International Security") ~ 
                              "International Security",
                            str_detect(source, "Kachin News") ~ 
                              "Kachin News Group",
                            str_detect(source, "Kachin Women's Association") ~ 
                              "Kachin Women's Association Thailand",
                            str_detect(source, "Kantarawaddy") ~ 
                              "Kantarawaddy Times",
                            str_detect(source, "Kachin News") ~ 
                              "Kachin News Group",
                            str_detect(source, "Mizzima") ~ 
                              "Mizzima",
                            source == "Mon News" ~ "Mon News Agency", 
                            source == "Myanmar NowShan Human Rights Foundation" ~ 
                              "Shan Human Rights Foundation", 
                            str_detect(source, "Myanmar Peace Monitor|mmpeacemonitor|Mmpeacemonitor") ~ 
                              "Myanmar Peace Monitor", 
                            source == "Narinjara via BNI Multimedia Group" ~ "Narinjara News", 
                            str_detect(source, "SATP|SATp|STP|satp|sato|STp") ~ 
                              "South Asia Terrorism Portal", 
                            str_detect(source, "PIPS Pakistan Security Report") ~ 
                              "PIPS Pakistan Security Report", 
                            source == "PNA" ~ "PNA (Philippines News Agency)", 
                            str_detect(source, "PSLF|TNLA|pslf") ~ "PSLF/TNLA", 
                            source == "Pajhwok News" ~ "Pajhwok Afghan News", 
                            str_detect(source, "Radio New Zealand") ~ "Radio New Zealand", 
                            str_detect(source, "Samaa") ~ "Samaa TV", 
                            source %in% c("Scroll India", "Scroll (India)") ~ "Scroll.in", 
                            source %in% c("Tempo", "Tempo Indonesia", 
                                          "Tempco News", "Tempo News") ~ "Tempo.co", 
                            str_detect(source, "Than Lwin Times") ~ "Than Lwin Times", 
                            source == "The Bureau of Investigate Journalism" ~ 
                              "The Bureau of Investigative Journalism",
                            source == "The Canadian Press - Broadcast wire" ~ 
                              "The Canadian Press", 
                            source %in% c("The Irradwaddy", "The Irrawaddi", "The Irrawaddy", 
                                          "The Irrawaddy Online", "The Irrawady", "The Irrawassy", 
                                          "The rrawaddy", "he Irrawaddy Online", "Irrawaddy", 
                                          "The Irrawaday") ~ 
                              "The Irrawaddy", 
                            source == "The Nation Thailand" ~ 
                              "The Nation",
                            source == "The New Yprk Times" ~ "The New York Times", 
                            source %in% c("The News (Pakistan)") ~ "The News International",
                            source == "The Patriot ndia" ~ "The Patriot India",
                            source == "The Print (India)" ~ "The Print", 
                            source == "The Shan Herald Agency for News" ~ 
                              "Shan Herald Agency for News", 
                            source == "The Stateless Rohinghya" ~ "The Stateless Rohingya", 
                            str_detect(source, "Times of India") ~ "The Times of India", 
                            source == "The Wall Street Journal Online" ~ "The Wall Street Journal", 
                            source %in% c("The Wire", "thewire.in", "Wire") ~ "Wire (India)", 
                            source %in% c("United Nations Human Rights Council",
                                          "Human Rights Council") ~ 
                              "UN Human Rights Council", 
                            str_detect(source, "HIGH COMMISSIONER FOR HUMAN RIGHTS") ~ "UN OHCHR", 
                            source == "Voi" ~ "VOI.id", 
                            str_detect(source, "Xinhua") ~ "Xinhua",
                            source == "Zee News India" ~ "Zee News (India)", 
                            source %in% c("bdnews´24.com", "bdnews24.com") ~ "BD News24",
                            source == "indiatoday.in" ~ "India Today", 
                            source == "www.thehindu.com" ~ "The Hindu", 
                            source == "www,thequint.com" ~ "The Quint",
                            source == "the Balochistan Post" ~ "The Balochistan Post",
                            source == "www.newindianexpress.com"  ~ "New Indian Express",
                            str_detect(source, "ABS-CBN") ~ "ABS-CBN",
                            str_detect(source, "Antara News En") ~ "Antara News", 
                            str_detect(source, "ATP Maharasthtra|Chhattisgarh|Jharkhand") ~ 
                              "South Asia Terrorism Portal",
                            source == "Burma Free Rangers" ~ "Free Burma Rangers", 
                            source == "India TodayNE" ~ "India Today", 
                            source == "Philippine Daily Inquirer" ~ "Inquirer.net", 
                            source == "RFA" ~ "Radio Free Asia", 
                            source %in% c("SAP", "ATP", "SAT") ~ "South Asia Terrorism Portal",
                            str_detect(source, "Thaiger") ~ "The Thaiger", 
                            source == "The New Indian Express" ~ "New Indian Express", 
                            source == "business-standard.com" ~ "Business Standard", 
                            source == "Dawn News" ~ "Dawn (Pakistan)", 
                            str_detect(source, "Kachin Women") ~ 
                              "Kachin Women's Association Thailand",
                            source == "hindustantimes" ~ "Hindustan Times", 
                            str_detect(source, "Voice of America") ~ "VOA", 
                            TRUE ~ source)) |> 
  mutate(source = str_trim(source)) |> 
  group_by(source, id) |> 
  summarise(num_sources = sum(n), .groups = "drop") |> 
  left_join(ged |> 
              select(id, year, country, source_headline), 
            by = c("id"))


ged_sources |> write_csv(here("data", "ged_sources.csv"))
  
```







```{r fig.height=7}

ged_source_order <- ged_sources |> 
  group_by(country) |> 
  summarise(num_sources = n_distinct(source)) |> 
  arrange(desc(num_sources)) |> 
  pull(country)

acled_sources |> 
  filter(country %in% ged_source_order) |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"), 
         year = year(event_date)) |> 
  group_by(country, year) |> 
  summarise(num_sources = n_distinct(source), .groups = "drop") |> 
  mutate(dataset = "ACLED") |>
  rbind(
    ged_sources |>
      group_by(country, year) |>
      summarise(num_sources = n_distinct(source), .groups = "drop") |> 
      mutate(dataset = "UCDP")
  ) |> 
  mutate(country = fct_relevel(country, ged_source_order)) |> 
  ggplot(aes(x = year, y = num_sources, fill = dataset)) + 
  geom_col() +
  facet_wrap(~ country) + 
  scale_fill_viridis_d(option = "cividis", 
                       begin = .2, end = .7,
                       direction = -1) +
  theme(axis.text.x = element_text(angle = 45, 
                                   hjust = 1)) + 
  labs(title = "Sources used in the ACLED and UCDP datasets, selected countries", 
       x = "", y = "Number of distinct sources",
       fill = "Dataset") + 
  scale_x_continuous(breaks = c(2014, 2016, 2018, 2020, 2022))
  
```






### Event types 

Straight from the codebook

```{r}
actor_codes_acled <- tribble(
  ~actor_code, ~description, 
  1, "State Forces", 
  2, "Rebel Groups", 
  3, "Political Militias", 
  4, "Identity Militias", 
  5, "Rioters",
  6, "Protesters", 
  7, "Civilians", 
  8, "Other Forces"
)
```

```{r}
interaction_codes_acled <- tribble(~interaction_code,	~interaction_description,
10,	"SOLE STATE FORCES ACTION (e.g. base establishment by state forces; remote violence involving state military with no reported casualties; non-violent military operations)",
11,	"STATE FORCES VERSUS STATE FORCES (e.g. military infighting; battles between a military and mutinous forces; arrests of military officials)",
12,	"STATE FORCES VERSUS REBELS (e.g. civil war violence between state forces and a rebel actor)",
13,	"STATE FORCES VERSUS POLITICAL MILITIA (e.g. violence between state forces and unidentified armedgroups; violence between police and political party militias)",
14,	"STATE FORCES VERSUS IDENTITY MILITIA (e.g. military engagement with a communal militia)",
15,	"STATE FORCES VERSUS RIOTERS (e.g. suppression of a violent demonstration by police or military)",
16,	"STATE FORCES VERSUS PROTESTERS (e.g. suppression of a peaceful demonstration by police or military)",
17,	"STATE FORCES VERSUS CIVILIANS (e.g. state repression of civilians; arrests by police)",
18,	"STATE FORCES VERSUS EXTERNAL/OTHER FORCES (e.g. inter-state conflict; state engagement with private security forces or a UN operation; strategic developments between a regime and the UN or another external actor)",
20,	"SOLE REBEL ACTION (e.g. base establishment; remote violence involving rebel groups with no reported target; accidental detonation by a rebel group)",
22,	"REBELS VERSUS REBELS (e.g. rebel infighting; violence between rebel groups and their splinter movements)",
23,	"REBELS VERSUS POLITICAL MILITIA (e.g. civil war violence between rebels and a pro-government militia; violence between rebels and unidentified armed groups)",
24,	"REBELS VERSUS IDENTITY MILITIA (e.g. violence between rebels and local security providers)",
25,	"REBELS VERSUS RIOTERS (e.g. spontaneous violence against a rebel group; a violent demonstration engaging a rebel group)",
26,	"REBELS VERSUS PROTESTERS (e.g. violence against protesters by rebels)",
27,	"REBELS VERSUS CIVILIANS (e.g. rebel targeting of civilians [a strategy commonly used in civil war])",
28,	"REBELS VERSUS OTHERS (e.g. civil war violence between rebels and an allied state military; rebel violence against a UN operation)",
30,	"SOLE POLITICAL MILITIA ACTION (e.g. remote violence by an unidentified armed group with no reported target; accidental detonation by a political militia; strategic arson as intimidation by a political party)",
33,	"POLITICAL MILITIA VERSUS POLITICAL MILITIA (e.g. inter-elite violence)",
34,	"POLITICAL MILITIA VERSUS IDENTITY MILITIA (e.g. violence between communal militia and an unidentified armed group; violence between political militia and local security providers)",
35,	"POLITICAL MILITIA VERSUS RIOTERS (e.g. violent demonstration against a political militia; spontaneous violence against a political militia)",
36,	"POLITICAL MILITIA VERSUS PROTESTERS (e.g. suppression of a peaceful demonstration by a political militia)",
37,	"POLITICAL MILITIA VERSUS CIVILIANS (e.g. out-sourced state repression carried out by pro-government militias; civilian targeting by political militias or unidentified armed groups)",
38,	"POLITICAL MILITIA VERSUS OTHERS (e.g. violence between private security forces and unidentified armed groups; violence between pro-government militia and external state military forces)",
40,	"SOLE IDENTITY MILITIA ACTION (e.g. destruction of property by a communal militia; establishment of a local security militia)",
44,	"IDENTITY MILITIA VERSUS IDENTITY MILITIA (e.g. inter-communal violence)",
45,	"IDENTITY MILITIA VERSUS RIOTERS (e.g. violent demonstration against an identity militia; spontaneous violence against an identity militia)",
46,	"IDENTITY MILITIA VERSUS PROTESTERS (e.g. suppression of a peaceful demonstration by  an identity militia)",
47,	"IDENTITY MILITIA VERSUS CIVILIANS (e.g. civilian targeting, especially in the context of inter-communal violence)",
48,	"IDENTITY MILITIA VERSUS OTHER (e.g. external state military engaging in violence against a communal militia)",
50,	"SOLE RIOTER ACTION (e.g. one-sided violent demonstration; spontaneous arson)",
55,	"RIOTERS VERSUS RIOTERS (e.g. two-sided violent demonstration in which both sides engage in violence)",
56,	"RIOTERS VERSUS PROTESTERS (e.g. two-sided demonstration in which only one side engages in violence)",
57,	"RIOTERS VERSUS CIVILIANS (e.g. violent demonstration in which civilians are injured/killed; spontaneous violence in which civilians are targeted by a mob)",
58,	"RIOTERS VERSUS OTHERS (e.g. mob violence against regional or international operation)",
60,	"SOLE PROTESTER ACTION (e.g. one-sided peaceful protest)",
66,	"PROTESTERS VERSUS PROTESTERS (e.g. two-sided peaceful protest)",
67,	"PROTESTERS VERSUS CIVILIANS (e.g. peaceful protesters engaging civilians)",
68,	"PROTESTERS VERSUS OTHER (e.g. suppression of a peaceful demonstration by private security forces)",
70,	"SOLE CIVILIAN ACTION (e.g. one-sided strategic development)",
77,	"CIVILIANS VERSUS CIVILIANS (e.g. peaceful interactions between civilians recorded as ‘Strategic developments’)",
78,	"OTHER ACTOR VERSUS CIVILIANS (e.g. regional or international operation targeting civilians; private security forces targeting civilians)",
80,	"SOLE OTHER ACTION (e.g. strategic developments involving international or regional operations; remote violence by external military forces with no reported target; non-violent external military operations)",
88,	"OTHER VERSUS OTHER (e.g. clashes between foreign state forces, international missions, or private security forces)") |> 
  mutate(interaction_simple = 
           str_to_title(str_extract(interaction_description, "\\b[A-Z](?:[A-Z ]*[A-Z])?\\b")))

interaction_codes_acled |> write_csv(here("data", "interaction_codes_acled.csv"))
```


```{r}
acled_filtered |> 
  mutate(interaction = parse_number(interaction)) |> 
  left_join(interaction_codes_acled, 
            by = c("interaction" = "interaction_code")) |> 
  mutate(ged_violence_type = 
           case_when(
             str_detect(interaction_simple, "Sole") ~ "one-sided", 
             str_detect(interaction_simple, "State Forces|Police") ~ "state-based",
             TRUE ~ "non-state")) |> 
  filter(ged_violence_type == "non-state") |> 
  filter(year == 2022 & country == "Myanmar") |> 
  sample_n(5) |> 
  select(notes, interaction_simple)
  pull(notes)
```

### Maps -- event types

```{r}
myammar_acled_2022 <- acled_filtered |> 
  mutate(interaction = parse_number(interaction)) |> 
  left_join(interaction_codes_acled, 
            by = c("interaction" = "interaction_code")) |> 
  mutate(ged_violence_type = 
           case_when(
             str_detect(interaction_simple, 
                        "Sole|Civilians|State Forces Versus Protesters") ~ "one-sided", 
             str_detect(interaction_simple, "State Forces|Police") ~ "state-based",
             TRUE ~ "non-state")) |> 
  filter(year == 2022 & country == "Myanmar") |> 
  mutate(
    admin1 = str_replace_all(admin1, "\\-East", " (East)"), 
    admin1 = str_replace_all(admin1, "\\-West", " (West)"),
    admin1 = str_replace_all(admin1, "\\-North", " (North)"),
    admin1 = str_replace_all(admin1, "\\-South", " (South)")
  ) |> 
  right_join(myanmar_adm1, by = c("admin1" = "state")) |> 
  st_as_sf() |>
  ggplot() +
  geom_sf(size = .1, colour = "darkgrey", fill = "black", data = myanmar_adm1) +
  geom_point(aes(x = longitude, y = latitude, 
                 colour = fct_relevel(ged_violence_type, 
                                      c("state-based",
                                        "non-state",
                                        "one-sided")),
                 size = fatalities), 
             alpha = .25) + 
  # scale_colour_viridis_d(option = "viridis", begin = .15) +
  scale_colour_manual(values = c("#fde725", "#b73779", "#21918c")) + 
  guides(colour = guide_legend(override.aes = list(alpha = 1), 
                               order = 1), 
         size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey"), 
                             order = 2)) + 
  theme_void() + 
  labs(title = "Myanmar 2022 Conflict events and fatalities, ACLED", 
       colour = "GED violence type", 
       size = "Fatalities") + 
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        rect = element_rect(fill = NA), 
        legend.text = element_text(colour = "white"), 
        title = element_text(colour = "white"))

ggsave(here("plots", "myanmar_acled_2022.png"), dpi = 300, height = 16.5, width = 11.7, units = "in")
            
```



```{r}
myanmar_ged_2022 <- ged |> 
  mutate(violence_type = case_when(
    type_of_violence == 1 ~ "state-based", 
    type_of_violence == 2 ~ "non-state", 
    type_of_violence == 3 ~ "one-sided"
  )) |> 
  filter(year == 2022 & country == "Myanmar" & !is.na(adm_1)) |> 
  mutate(adm_1 = str_replace_all(adm_1, "\\sregion|\\sstate", ""), 
         adm_1 = ifelse(str_detect(adm_1, "Naypyidaw"), "Nay Pyi Taw", adm_1)) |>
  right_join(myanmar_adm1, 
             by = c("adm_1" = "state")) |> 
  st_as_sf() |> 
  filter(!is.na(violence_type)) |> 
  ggplot() +
  geom_sf(size = .1, colour = "darkgrey", fill = "black", data = myanmar_adm1) +
  geom_point(aes(x = longitude, y = latitude, 
                 colour = violence_type,
                 size = best), 
             alpha = .5) + 
  # scale_colour_viridis_d(option = "viridis") +
  scale_colour_manual(values = c("#21918c", "#fde725")) + 
  guides(size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey")), 
         colour = guide_legend(override.aes = list(alpha = 1)) 
         ) + 
  theme_void() + 
  labs(title = "Myanmar 2022 Conflict events and fatalities, UCDP", 
       colour = "GED violence type", 
       size = "Fatalities") + 
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        rect = element_rect(fill = NA), 
        legend.text = element_text(colour = "white"), 
        title = element_text(colour = "white"))



ggsave(here("plots", "myanmar_ged_2022.png"), dpi = 300, height = 16.5, width = 11.7, units = "in")
  

```
  
  
  
```{r}
combined_plot <- myammar_acled_2022 + 
  myanmar_ged_2022 + 
  plot_layout(nrow = 1)

ggsave(here("plots", "myanmar_combined_2022.png"), dpi = 300, height = 16.5, width = 29, units = "in")

```


The linear pattern (which reflect the fight for control of major highways and roads) of conflict in 2022 cannot be easily discerned from the UCDP dataset -- this just might be due to the lack of volume of reporting 

Furthermore, conflict in Northern Shan and along the Chin border are not very clear. 

![](./plots/myanmar_combined_2022.png)


```{r}
ged |> 
  filter(year == 2022 & country == "Myanmar") |> 
  count(dyad_new_id, type_of_violence, sort = TRUE)

```

```{r}
ged |> 
  filter(dyad_new_id == 955) |> 
  sample_n(5) |> 
  pull(source_article)
```


### Comparing actors 

```{r}
rbind(
  acled_filtered |>
    select(actor = actor1, actor_code = inter1, event_id_cnty),
  
  acled_filtered |> 
    select(actor = actor2, actor_code = inter2, event_id_cnty)
  
  ) |> 
  left_join(acled_filtered |> 
              select(event_id_cnty, interaction, event_date, country), 
            by = "event_id_cnty",
            relationship = "many-to-many") |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"), 
         year = year(event_date)) |> 
  left_join(actor_codes_acled |>
              rename(actor_description = description), 
            by = "actor_code", 
            relationship = "many-to-many")

```



The dataset actors are actually very well-cleaned, especially compared to before 



```{r}
acled_actors <- rbind(
  acled_filtered |>
    select(actor = actor1, actor_code = inter1, id = event_id_cnty),
  
  acled_filtered |> 
    select(actor = actor2, actor_code = inter2, id = event_id_cnty)
  
  ) |> 
  left_join(acled_filtered |> 
              select(id = event_id_cnty, interaction, event_date, country, fatalities), 
            by = c("id"),
            relationship = "many-to-many") |> 
  mutate(event_date = as.Date(event_date, "%d %B %Y"), 
         year = year(event_date), 
         actor_code = as.double(actor_code)) |> 
  left_join(actor_codes_acled |>
              rename(actor_description = description), 
            by = "actor_code", 
            relationship = "many-to-many") |> 
  mutate(source = "ACLED")
  
```


```{r}

ged_actors <- rbind(
  ged |> 
    select(actor = side_a, actor_code = side_a_new_id, id = relid), 
  
  ged |> 
    select(actor = side_b, actor_code = side_b_new_id, id = relid)
) |> 
  
  left_join(
    ged |> 
      select(id = relid, year, event_date = date_start), 
    by = c("id"),
    relationship = "many-to-many"
  ) |> 
  mutate(actor_description = "", 
         source = "UCDP")

```




```{r}
acled_actors_order <- acled_actors |> 
  group_by(country) |> 
  summarise(num_actors = n_distinct(actor)) |> 
  arrange(desc(num_actors)) |> 
  pull(country)

acled_actors |> 
  group_by(country, year, actor_description) |> 
  summarise(num_actors = n_distinct(actor), .groups = "drop") |> 
  filter(!is.na(actor_description)) |> 
  mutate(country = fct_relevel(country, acled_actors_order)) |> 
  ggplot(aes(x = year, y = num_actors, group = actor_description)) + 
  geom_col(aes(fill = actor_description)) + 
  facet_wrap(~country, scales = "free_y") + 
  scale_fill_viridis_d(option = "turbo") + 
  scale_x_continuous(breaks = c(2014, 2016, 2018, 2020, 2022)) + 
  scale_y_continuous(labels = number_format(scale = 1)) + 
  theme(axis.text.x = element_text(hjust = 1, angle = 45), 
        legend.position = "top", 
        legend.text = element_text(size = 5), 
        legend.key.width = unit(.3, "cm"), 
        legend.key.height = unit(.3, "cm"), 
        legend.margin=margin(t = 0, unit='cm')) + 
  labs(title = "ACLED: Breakdown of conflict actor types in the Asia-Pacific, 2014-2023", 
       x = "", y = "Number of actors", 
       fill = "") + 
  guides(fill = guide_legend(nrow = 1)) + 
  theme(
    axis.text.y = element_text(size = 5)
  )
```

```{r}
ged_actors <- rbind(
  ged |> select(actor = side_a, actor_id = side_a_new_id, id, year, country), 
  ged |> select(actor = side_b, actor_id = side_b_new_id, id, year, country)) |>
  group_by(country) |> 
  mutate(num_actors_country = n_distinct(actor)) |> 
  ungroup() 

ged_actors |> 
  mutate(country = fct_reorder(country, -num_actors_country)) |> 
  group_by(country, year) |> 
  summarise(num_actors = n_distinct(actor), .groups = "drop") |>  
  ggplot(aes(x = year, y = num_actors)) + 
  geom_col(fill = "blue") + 
  facet_wrap(~country) + 
  theme(axis.text.x = element_text(hjust = 1, angle = 45)) + 
    labs(title = "UCDP: Breakdown of conflict actors in the Asia-Pacific, 2013-2023", 
       x = "", y = "Number of actors") 
  
```

```{r}
rbind(
  ged |> filter(country == "Myanmar" & year == 2022) |> 
    select(actor = side_a, actor_id = side_a_new_id, id, year, country, fatalities = best), 
  ged |> filter(country == "Myanmar" & year == 2022) |> 
    select(actor = side_b, actor_id = side_b_new_id, id, year, country, fatalities = best)) |>
  group_by(actor, id) |> 
  summarise(assoc_fatalities = mean(fatalities), .groups = "drop") |> 
  group_by(actor) |> 
  summarise(assoc_fatalities = sum(assoc_fatalities)) |> 
  arrange(desc(assoc_fatalities)) |> 
  mutate(pc_fatalities = assoc_fatalities / sum(assoc_fatalities) * 100)

  
```

```{r}
ged |> filter(country == "Myanmar" & side_b == "ULA")
```


```{r}

acled_actors |> 
  filter(year == 2022 & country == "Myanmar") |> 
  mutate(actor = case_when(str_detect(actor, "PDF|People's Defense|Defense Force") ~ 
                             "NUG", 
                           str_detect(actor, "Pyu Saw Htee") ~ 
                             "Military Forces of Myanmar (2021-)", 
                           
                           
                           TRUE ~ actor)) |> 
  mutate(actor = str_sub(actor, 1, 36)) |> 
  group_by(actor) |> 
  summarise(assoc_fatalities = sum(fatalities)) |> 
  arrange(desc(assoc_fatalities)) |> 
  mutate(pc_fatalites = assoc_fatalities / sum(assoc_fatalities) * 100)
```

```{r}
acled_filtered |> glimpse()
  select(actor1, actor2, event_id_cnty, country, interaction) |> 
  pivot_longer(cols = c(actor1, actor2), 
               names_to = "order", 
               values_to = "actor") |> 
  filter(!is.na(actor))  

  summarise(count = sum(count)) |> 
  ggplot(aes(x = count))
  
acled_filtered |> 
  filter(country == "Myanmar") |> 
  distinct(actor1)
```



```{r}
acled_filtered |> 
  filter(event_type != "Protests") |> 
  mutate(interaction = parse_number(interaction)) |> 
  left_join(interaction_codes_acled, 
            by = c("interaction" = "interaction_code")) |> 
  mutate(interaction_lump = fct_lump(interaction_simple, 19)) |> 
  count(interaction_lump, year, sort = TRUE) |> 
  ggplot(aes(x = year, y = n)) + 
  geom_col(aes(fill = ))
```










