---
title: "Gifs working"
author: "Sean Ng"
date: "12 July 2024"
toc: true
toc-location: left
toc-depth: 4
format: 
  html:
    page-layout: full
    code-tools: true
    self-contained: true
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
                      fig.width = 9.5)

library(tidyverse)
library(here)
library(lubridate)
library(patchwork)
library(scales)
library(sf)
library(broom)
library(treemapify)
library(kableExtra)
library(gganimate)
library(gifski)

`%out%` <- Negate(`%in%`)
options(scipen = 100)
theme_set(theme_light())

show_col(viridis_pal(option = "cividis")(8))

```


# Data

```{r data}
country_list <- c("Australia", "Afghanistan", "Bangladesh", "Bhutan", "Cambodia", 
                  "China", "Fiji", "Hong Kong", "Japan", "India", "Indonesia", 
                  "Iran",  "Laos", "Malaysia", "Maldives", "Mongolia", "Myanmar", 
                  "Nepal", "New Zealand",  "North Korea", "Pakistan", "Papua New Guinea",
                  "Philippines", "Singapore", "Solomon Islands", "South Korea", 
                  "Sri Lanka", "Thailand", "Timor-Leste", "Vanuatu", "Vietnam")


population <- read_csv(here("data", "wdi_all_countries_population.csv")) |> 
  janitor::clean_names()  %>%
  mutate(across(matches("_yr"), ~ as.numeric(.))) |> 
  pivot_longer(cols = x2000_yr2000:x2023_yr2023, 
               names_to = "year", 
               values_to = "population") |>
  mutate(year = str_sub(year, start = -4, end = -1), 
         year = as.double(year)) |> 
  rename(country = country_name) |> 
  mutate(country = 
           case_when(str_detect(country, "Korea, Rep.") ~ "South Korea",
                             str_detect(country, "Korea, Dem. People's Rep.") ~ "North Korea", 
                             str_detect(country, "Hong Kong SAR, China") ~ "Hong Kong", 
                             str_detect(country, "Iran, Islamic Rep.") ~ "Iran", 
                             str_detect(country, "Lao PDR") ~ "Laos", 
                             country == "Viet Nam" ~ "Vietnam", 
                             TRUE ~ country), 
         country_iso = countrycode::countrycode(country,
                                   origin = "country.name", 
                                   destination = "iso3c")) |> 
  filter(!is.na(country) & 
           country %out% c("Data from database: World Development Indicators", 
                           "Last Updated: 06/28/2024"))

# population_estimates <- crossing(country = population$country, year = 2000:2023) |> 
#   left_join(population |> 
#               select(year, country, population), 
#             by = c("year", "country")) |> 
#   group_by(country) %>% 
#   fill(population, .direction = "updown") 


population_estimates <- crossing(country = population$country, year = 2000:2023) |> 
  left_join(population |> 
              select(year, country, population), 
            by = c("year", "country")) |> 
  group_by(country) %>% 
  fill(population, .direction = "updown")


world_shape <- st_read(here("data", 
                            "world-administrative-boundaries", 
                            "world-administrative-boundaries.shp"), 
                       quiet = TRUE) |> 
  mutate(country = case_when(
    name == "Iran (Islamic Republic of)" ~ "Iran", 
    name == "Republic of Korea" ~ "South Korea", 
    name == "Democratic People's Republic of Korea" ~ "North Korea", 
    name == "Lao People's Democratic Republic" ~ "Laos", 
    TRUE ~ name
  )) 

asia_pacific_shape <- world_shape  |> 
  filter(country %in% country_list | 
           country %in% c("Arunachal Pradesh", "Jammu-Kashmir", "Aksai Chin"))

myanmar_adm1 <- st_read(here("data", 
                             "mmr_polbnda2_adm1_mimu_250k", 
                             "mmr_polbnda2_adm1_mimu_250k.shp"), 
                        quiet = TRUE) |> 
  rename(state = ST, 
        admin1_pcode = ST_PCODE) |> st_as_sf()

country_iso3 <- world_shape |> 
  distinct(name, iso3)

acled_filtered <- readRDS(here("data", "acled_filtered.rds"))

most_events_list <- acled_filtered |> 
  group_by(country) |> 
  summarise(events = n()) |> 
  arrange(desc(events)) |> 
  pull(country)

most_fatalities_list <- acled_filtered |> 
  group_by(country) |> 
  mutate(fatalities = as.numeric(fatalities)) |> 
  summarise(fatalities = sum(fatalities, na.rm = TRUE)) |> 
  arrange(desc(fatalities)) |> 
  pull(country)

actor_codes_acled <- tribble(
  ~actor_code, ~description, 
  1, "State Forces", 
  2, "Rebel Groups", 
  3, "Political Militias", 
  4, "Identity Militias", 
  5, "Rioters",
  6, "Protesters", 
  7, "Civilians", 
  8, "Other Forces"
)

lebanon <- readRDS(here("data", "lebanon.rds"))

lebanon_shape <- world_shape |> 
  filter(str_detect(name, 
                    "Gaza Strip|Israel|West Bank|Lebanon|Syrian Arab Republic"))
```





> New variable for conflict in border areas. 
> Define buffer radius

For Afghanhistan, basically, create a line approximating the border, then 


# Gif


```{r}
asia_pacific_event_types <- acled_filtered |>  
  # filter(sub_event_type %out% c("Agreement", 
  #                               "Change to group/activity", 
  #                               "Headquarters or base established", 
  #                               "Non-violent transfer of territory")) |> 
  mutate(quarter = floor_date(event_date, "quarter")) %>%
  select(event_id_cnty, event_type, longitude, latitude, event_type, quarter, fatalities) %>%
  mutate(quarter = map(quarter, ~seq.Date(as.Date(.), as.Date("2024-05-15"), by = "quarter"))) |> 
  unnest(quarter) |> 
  mutate(quarter = format_ISO8601(quarter, precision = "ym")) %>%
  ggplot() + 
  geom_sf(data = asia_pacific_shape, size = .5, colour = "grey", fill = "grey90") + 
  geom_point(aes(x = longitude, y = latitude, colour = event_type, size = fatalities), alpha = .15) + 
  
  coord_sf(xlim = c(44, 180), 
           ylim = c(-44, 52)) + 
  scale_colour_manual(
    values = c("Battles" = "#7A0403FF", 
      "Explosions/Remote violence" = "#FABA39FF", 
      "Protests" = "#72FE5EFF", 
      "Riots" = "#36AAF9FF", 
      "Strategic developments" = "#30123BFF", 
      "Violence against civilians" = "#FCFDBFFF")
  ) + 
  scale_size_continuous(range = c(.1, 6), breaks = c(0, 10, 50, 100, 150)) +
  theme_void() +
  guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2.7)), 
         size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey"))) +
  theme(plot.background = element_rect(fill = "grey99", colour = "grey99"), 
        rect = element_rect(fill = NA, colour = NA), 
        legend.title = element_text(face = "bold", size = 16),
        legend.position = c(0.07, 0.2), 
        legend.box.background = element_blank(),
        legend.key = element_rect(colour = NA, fill = NA), 
        plot.caption = element_text(hjust = 0.5), 
        plot.title = element_text(size = 23)) + 
  gganimate::transition_manual(quarter) + 
  labs(title = "Asia-Pacific conflict events in { current_frame }", 
       caption = "Data source: Armed Conflict Location & Event Data Project (ACLED); acleddata.com",
       colour = "Event type")


gganimate::animate(asia_pacific_event_types, width = 3240, height = 2160, res = 150, duration = 60, 
                   renderer = gifski_renderer())



gganimate::anim_save(here("plots", "asia_pacific_event_types_grey.gif"))



```


```{r}
lebanon_event_types <- lebanon |> 
  filter(event_date > "2019-09-13") |> 
  mutate(quarter = floor_date(event_date, "quarter")) %>%
  select(event_id_cnty, event_type, longitude, latitude, event_type, quarter, fatalities) %>%
  mutate(quarter = map(quarter, ~seq.Date(as.Date(.), as.Date("2024-09-13"), by = "quarter"))) |> 
  unnest(quarter) |> 
  mutate(quarter = format_ISO8601(quarter, precision = "ym")) |> 
  ggplot() + 
  geom_sf(data = lebanon_shape, size = .5, colour = "grey", fill = "grey90") + 
  geom_sf(data = world_shape |> filter(str_detect(name, "Lebanon")), 
          size = 2, colour = "goldenrod2", fill = "grey90") + 
  geom_point(aes(x = 35.5018, y = 33.8938), size = 4.5, 
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 35.5018, y = 33.8938), size = 2, label = "Beirut") +
  geom_point(aes(x = 36.2768, y = 33.5132), size = 4.5, 
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 36.2768, y = 33.5132), size = 2, label = "Damascus") +
  geom_point(aes(x = 34.27, y = 31.31), size = 4.5, <
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 34.27, y = 31.31), size = 2, label = "Gaza") +
  geom_point(aes(x = 32.0853, y = 34.7818), size = 4.5, 
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 32.0853, y = 34.7818), size = 2, label = "Tel Aviv") +
  geom_point(aes(x = 35.2034, y = 31.9038), size = 4.5, 
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 35.2034, y = 31.9038), size = 2, label = "Ramallah") +, 
  geom_point(aes(x = 36.011300744967144, y = 34.47941171325137), size = 4.5, 
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 36.011300744967144, y = 34.47941171325137), size = 2, label = "Tripoli") +
  geom_point(aes(x = 36.7309300817992, y = 34.73074641115168), size = 4.5, 
             colour = "goldenrod2", pch = 18, alpha = .8) +
  geom_text(aes(x = 36.7309300817992, y = 34.73074641115168), size = 2, label = "Homs") +
  geom_point(aes(x = longitude, y = latitude, colour = event_type, size = fatalities), alpha = .15) + 
  coord_sf(xlim = c(34, 43), 
           ylim = c(29, 37.8)) +
  scale_colour_manual(values = c(
      "Battles" = "#9b2226",
      "Violence against civilians" = "#bb3e03",
      "Explosions/Remote violence" = "#ee9b00",
      "Protests" = "#94d2bd",
      "Strategic developments" = "#001219",
      "Riots" = "#005f73"
    )) +
  scale_size_continuous(range = c(.1, 6), breaks = c(0, 10, 50, 100, 150)) +
  theme_void() +
  guides(colour = guide_legend(override.aes = list(alpha = 1, size = 2.7)), 
         size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey"))) +
  theme(plot.background = element_rect(fill = "grey99", colour = "grey99"), 
        rect = element_rect(fill = NA, colour = NA), 
        legend.title = element_text(face = "bold", size = 16),
        legend.position = c(0.8, 0.2), 
        legend.box.background = element_blank(),
        legend.key = element_rect(colour = NA, fill = NA), 
        plot.caption = element_text(hjust = 0.5), 
        plot.title = element_text(size = 23)) + 
  gganimate::transition_manual(quarter) + 
  labs(title = "Conflict events in Lebanon and neigbouring countries in { current_frame }", 
       caption = "Data source: Armed Conflict Location & Event Data Project (ACLED); acleddata.com",
       colour = "Event type")

gganimate::animate(lebanon_event_types, width = 3240, height = 2160, res = 150, duration = 30, 
                   renderer = gifski_renderer())



gganimate::anim_save(here("plots", "lebanon_event_types_grey.gif"))
```


```{r}
world_shape |> st_drop_geometry() |> count(country)

"Arunachal Pradesh"
"Jammu-Kashmir"

acled_filtered |> 
  filter(country == "India" & event_type == "Battles" & admin1 == "Chhattisgarh") |> 
  sample_n(5) |> 
  pull(notes)
  summarise(fatalities = mean(fatalities))
```





```{r}
asia_pacific_event_types <- acled_filtered |>  
  filter(sub_event_type %out% c("Agreement", 
                                "Change to group/activity", 
                                "Headquarters or base established", 
                                "Non-violent transfer of territory")) |> 
  mutate(quarter = floor_date(event_date, "quarter")) %>%
  select(event_id_cnty, event_type, longitude, latitude, event_type, quarter, fatalities) %>%
  mutate(quarter = map(quarter, ~seq.Date(as.Date(.), as.Date("2023-12-01"), by = "quarter"))) |> 
  unnest(quarter) |> 
  mutate(quarter = format_ISO8601(quarter, precision = "ym")) %>%
  ggplot() + 
  geom_sf(data = asia_pacific_shape, size = .5, colour = "grey", fill = "black") +
  geom_point(aes(x = longitude, y = latitude, colour = event_type, size = fatalities), alpha = .15) + 
  
  theme_void() +
  guides(colour = guide_legend(override.aes = list(alpha = 1)), 
         size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey"))) +
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        rect = element_rect(fill = NA), 
        legend.text = element_text(colour = "white"), 
        title = element_text(colour = "white"),
        legend.title = element_text(face = "bold"),
        plot.caption = element_text(hjust = 0.2)) + 
  gganimate::transition_manual(quarter) + 
  labs(title = "Asia-Pacific conflict events in { current_frame }", 
       subtitle = "Excludes non-violent strategic developments", 
       caption = "Data source: Armed Conflict Location & Event Data Project (ACLED); acleddata.com",
       colour = "Event type")


gganimate::animate(asia_pacific_event_types, width = 2480, height = 1748, res = 150, duration = 60, renderer = gifski_renderer())

gganimate::anim_save(here("plots", "asia_pacific_event_types.gif"))
```

```{r}
world_shape |> 
  ggplot() + 
  geom_sf() + 
  coord_sf(xlim = c(44, 155), 
           ylim = c(-15, 52))

ggplot() + 
  geom_sf(data = asia_pacific_shape) + 
  coord_sf(xlim = c(44, 180), 
           ylim = c(-44, 52))
```


```{r}
asia_pacific_event_types <- acled_filtered |>  
  filter(!is.na(longitude) & !is.na(latitude)) |> 
  filter(sub_event_type %out% c("Agreement", 
                                "Change to group/activity", 
                                "Headquarters or base established", 
                                "Non-violent transfer of territory")) |> 
  mutate(quarter = floor_date(event_date, "quarter")) %>%
  select(event_id_cnty, event_type, longitude, latitude, event_type, quarter, fatalities) %>% 
  mutate(quarter = map(quarter, ~seq.Date(as.Date(.), as.Date("2023-12-01"), by = "quarter"))) |> 
  unnest(quarter) |> 
  mutate(quarter = format_ISO8601(quarter, precision = "ym")) %>%
  ggplot() +
  geom_sf(data = world_shape, size = .5, colour = "grey30", fill = "black") + 
  coord_sf(xlim = c(43, 155), 
           ylim = c(-15, 52)) +
  geom_point(aes(x = longitude, y = latitude, colour = event_type, size = fatalities), alpha = .05) +
  scale_size_continuous(range = c(0.1, 4)) +
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        rect = element_rect(fill = NA),
        legend.text = element_text(colour = "white"), 
        title = element_text(colour = "white"),
        legend.title = element_text(face = "bold"),
        plot.caption = element_text(hjust = 0.2)) + 
  guides(colour = guide_legend(override.aes = list(alpha = 1)), 
         size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey"))) + 
  labs(title = "Asia-Pacific conflict events in { current_frame }", 
       subtitle = "Excludes non-violent strategic developments", 
       caption = "Data source: Armed Conflict Location & Event Data Project (ACLED); acleddata.com",
       colour = "Event type") + 
  gganimate::transition_manual(quarter) 

gganimate::animate(asia_pacific_event_types, width = 2480, height = 1748, res = 150, 
                   duration = 40, 
                   renderer = gifski_renderer())

gganimate::anim_save(here("plots", "asia_pacific_event_types.gif"))
```


### Interaction codes


### Test for aesthetics 

```{r}
acled_filtered |>  
  filter(!is.na(longitude) & !is.na(latitude)) |> 
  filter(sub_event_type %out% c("Agreement", 
                                "Change to group/activity", 
                                "Headquarters or base established", 
                                "Non-violent transfer of territory")) |> 
  mutate(quarter = floor_date(event_date, "quarter")) %>%
  select(event_id_cnty, event_type, longitude, latitude, event_type, quarter, fatalities) |> 
  # mutate(quarter = map(quarter, ~seq.Date(as.Date(.), as.Date("2023-12-01"), by = "quarter"))) |> 
  # unnest(quarter) |> 
  # mutate(quarter = format_ISO8601(quarter, precision = "ym")) %>%
  ggplot() +
  geom_sf(data = world_shape, size = .5, colour = "grey30", fill = "black") + 
  coord_sf(xlim = c(43, 155), 
           ylim = c(-15, 52)) +
  geom_point(aes(x = longitude, y = latitude, colour = event_type, size = fatalities), alpha = .05) +
  scale_size_continuous(range = c(0.1, 4)) +
  theme(plot.background = element_rect(fill = "black", colour = "black"),
        panel.background = element_rect(fill = "black", colour = "black"),
        rect = element_rect(fill = "NA"),
        legend.text = element_text(colour = "white"), 
        title = element_text(colour = "white"),
        legend.title = element_text(face = "bold"),
        plot.caption = element_text(hjust = 0.2)) + 
  guides(colour = guide_legend(override.aes = list(alpha = 1)), 
         size = guide_legend(override.aes = list(alpha = 1, 
                                                 colour = "grey"))) + 
  theme_void() + 
  labs(title = "Asia-Pacific conflict events in { current_frame }", 
       subtitle = "Excludes non-violent strategic developments", 
       caption = "Data source: Armed Conflict Location & Event Data Project (ACLED); acleddata.com",
       colour = "Event type")
```

